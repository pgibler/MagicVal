package com.magicval.card;

import java.io.IOException;

import com.magicval.image.GathererCardImageLoader;

import android.graphics.Bitmap;
import android.os.Parcel;
import android.os.Parcelable;

/**
 * A MagicCard is, for the purposes of this application, a tradeable object.
 * It has a name and a price to distinguish itself.
 * MagicCards are also Parcelable for the purposes of sending them
 * between Activity instances.
 * @author Paul Gibler
 *
 */
public class MagicCard implements Parcelable {
	/**
	 * A URL friendly version of the name of this MagicCard.
	 */
	private String nameForURL = null;
	/**
	 * Returns a URL friendly version of the name of this MagicCard.
	 * @return A URL friendly version of the name of this MagicCard.
	 */
	public String getNameForURL() {
		if(nameForURL == null)
		{
			nameForURL = name.replace(" ", "%20");
		}
		return nameForURL;
	}
	
	private String name;
	/**
	 * Returns the name returned from searching for this MagicCard.
	 * This string is the one found during the price search of the MagicCard.
	 * @return The found name of the MagicCard.
	 */
	public String getNameFromSearch() {
		return name + " (" + set.getSetId() + ")";
	}
	
	private MonetaryValue monetaryValue;
	/**
	 * Returns the monetary value of this MagicCard.
	 * @return The monetary value of this MagicCard.
	 */
	public MonetaryValue getMonetaryValue()
	{
		return monetaryValue;
	}

	private MagicSet set;
	/**
	 * Returns the set that this edition of this MagicCard was released in.
	 * @return The set that this edition of this MagicCard was released in.
	 */
	public MagicSet getMagicSet()
	{
		return set;
	}
	
	/**
	 * Stores the image of the MagicCard;
	 */
	private Bitmap image = null;
	/**
	 * Loads this MagicCard's image. Lazily loads the MagicCard image.
	 * @return A Bitmap image of the MagicCard.
	 * @throws IOException If the image fails to load, throw this exception.
	 */
	public Bitmap getImage() throws IOException {
		if(image == null)
		{
			image = new GathererCardImageLoader().getImage(this);
		}
		return image;
	}
	
	/**
	 * Creates an instance of MagicCard.
	 * @param name The name of the MagicCard.
	 * @param median The median price of the MagicCard.
	 * @param high The highest price the MagicCard has been.
	 * @param low The lowest price the MagicCard has been.
	 */
	public MagicCard(final String name, final double median, final double high, final double low, MagicSet set)
	{
		init(name, new MonetaryValue(median, high, low), set);
	}

	/**
	 * Creates an instance of MagicCard.
	 * @param name The name of the MagicCard.
	 * @param name The actual string that was the MagicCard name.
	 * @param value The MonetaryValue of the MagicCard. Contains median price, highest price, and lowest price.
	 */
	public MagicCard(final String name, MonetaryValue value, MagicSet set)
	{
		init(name, value, set);
	}
	
	/**
	 * Creates an instance of MagicCard from a Parcel.
	 * @param p The Parcel to create this MagicCard from.
	 */
	public MagicCard(Parcel p)
	{
		readFromParcel(p);
	}
	
	// Parcelable methods
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeString(name);
		dest.writeDouble(monetaryValue.getMedianPrice());
		dest.writeDouble(monetaryValue.getHighPrice());
		dest.writeDouble(monetaryValue.getLowPrice());
		dest.writeParcelable(image, flags);
		dest.writeParcelable(set, flags);
	}
	
    public int describeContents() {
        return 0;
    }
	
	public static final Parcelable.Creator<MagicCard> CREATOR
    = new Parcelable.Creator<MagicCard>() {
		public MagicCard createFromParcel(Parcel in) {
		    return new MagicCard(in);
		}
		
		public MagicCard[] newArray(int size) {
		    return new MagicCard[size];
		}
	};
		
	// Private methods
	
	/**
	 * Reads in this MagicCard from a Parcel.
	 */
	private void readFromParcel(Parcel p)
	{
		name = p.readString();	// Name From Search
		monetaryValue = new MonetaryValue(
				p.readDouble(),				// Median
				p.readDouble(),				// High
				p.readDouble());			// Low
		image = p.readParcelable(Bitmap.class.getClassLoader());
		set = p.readParcelable(MagicSet.class.getClassLoader());
	}
	
	/**
	 * Standard initializer for MagicCard.
	 * @param name The name of the MagicCard as generated by the search.
	 * @param monetaryValue The value of the MagicCard.
	 */
	private void init(final String name, MonetaryValue monetaryValue, MagicSet set) {
		this.name = name;
		this.monetaryValue = monetaryValue;
		this.set = set;
	}

	/**
	 * Returns true if the MagicCard is in a valid state to be displayed.
	 * @return True if the MagicCard is in a valid state to be displayed.
	 */
	public boolean isValid() {
		return 
				this.monetaryValue.getMedianPrice() != 0 &&
				!isEmpty(this.set.getSetName());
	}
	
	private boolean isEmpty(String str)
	{
		return str == null || str.trim() == "";
	}
}
